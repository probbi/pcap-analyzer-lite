# file: pcap-analyzer-lite.py
# scapy.all.rdpcap a Scapy egy h√°l√≥zati csomagkezel≈ë k√∂nyvt√°r. Az rdpcap() f√ºggv√©ny seg√≠ts√©g√©vel beolvashat√≥ egy .pcap f√°jl, √©s visszaadja a benne l√©v≈ë √∂sszes csomagot.
#collections.Counter: egy speci√°lis sz√≥t√°r, amely sz√°ml√°lja, hogy h√°nyszor fordul el≈ë egy adott elem.
from scapy.all import rdpcap, TCP, UDP, IP
from collections import Counter
import geoip2.database

# Be√°ll√≠t√°s: GeoIP adatb√°zis el√©r√©si √∫tja

import os

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
GEOIP_DB_PATH = os.path.join(SCRIPT_DIR, "data", "GeoLite2-City.mmdb")
PCAP_FILE_PATH = os.path.join(SCRIPT_DIR, "data", "sample-traffic-analysis-exercise.pcap")

# Protokoll sz√°mok √©s r√∂vid√≠tett nevek lek√©pez√©se
proto_names = {
    1: "ICMP",
    6: "TCP",
    17: "UDP",
    2: "IGMP",
    
    # ide j√∂hetnek m√©g protokollok, pl. 2: "IGMP", 89: "OSPF" stb.
}


app_proto_names = {
    80: "HTTP",
    443: "HTTPS",
    53: "DNS",
    123: "NTP",
    25: "SMTP",
    110: "POP3",
    143: "IMAP",
    22: "SSH",
    21: "FTP",
    20: "FTP (data)",
    23: "Telnet",
    3306: "MySQL",
    3389: "RDP",
    8080: "HTTP-alt",
    # ... lehet b≈ëv√≠teni m√©g ig√©ny szerint
}
DETAILED_APP_PROTO = True  # vagy False, ha nem kell a r√©szletes lista
# Beolvassa a megadott .pcap f√°jlt, √©s elt√°rolja a benne l√©v≈ë √∂sszes h√°l√≥zati csomagot a packets v√°ltoz√≥ban. Ez egy listaszer≈± objektum lesz, amiben minden elem egy h√°l√≥zati csomag.
packets = rdpcap(PCAP_FILE_PATH)
# Sz√°ml√°l√≥k inicializ√°l√°sa
# ip_counter: ebben a sz√≥t√°rban sz√°molja meg, hogy melyik forr√°s IP-c√≠m h√°nyszor fordul el≈ë.

# proto_counter: itt sz√°molja, hogy melyik IP-szint≈± protokoll (pl. TCP, UDP, ICMP) h√°nyszor jelenik meg.
ip_counter = Counter()
proto_counter = Counter()
port_counter = Counter()

# GeoIP olvas√≥ inicializ√°l√°sa
geo_reader = geoip2.database.Reader(GEOIP_DB_PATH)

ip_locations = {}

# Csomagok feldolgoz√°sa
# pkt.haslayer("IP"): csak azokat a csomagokat vizsg√°lja, amelyek IP r√©teget tartalmaznak.
# pkt["IP"].src: lek√©ri a forr√°s IP-c√≠met.
# pkt["IP"].proto: lek√©ri az IP protokoll sz√°m√°t (p√©ld√°ul 6 = TCP, 17 = UDP, 1 = ICMP).
# Ezeket a sz√°ml√°l√≥kat friss√≠ti minden IP csomagra.


for pkt in packets:
    if IP in pkt:
       ip = pkt[IP].src
       ip_counter[ip] += 1
       proto = pkt[IP].proto
       proto_counter[proto] += 1
       
       # Portok vizsg√°lata
       if TCP in pkt:
            port_counter[pkt[TCP].dport] += 1
       elif UDP in pkt:
            port_counter[pkt[UDP].dport] += 1
       
       # Geolok√°ci√≥ csak egyszer per IP 
       if ip not in ip_locations:
            try:
                response = geo_reader.city(ip)
                city = response.city.name or "Ismeretlen v√°ros"
                country = response.country.name or "Ismeretlen orsz√°g"
                ip_locations[ip] = f"{city}, {country}"
            except:
                ip_locations[ip] = "Nem tal√°lhat√≥"

geo_reader.close()
            
# Top forr√°s IP-k √©s geolok√°ci√≥k
print("üìä Top forr√°s IP-k √©s hely√ºk:")
for ip, count in ip_counter.most_common(5):
    location = ip_locations.get(ip, "N/A")
    print(f"{ip} ({location}): {count} csomag")

# Protokoll eloszl√°s ki√≠r√°sa
print("\nüì¶ Protokoll eloszl√°s:")
for proto_num, count in proto_counter.items():
    proto_name = proto_names.get(proto_num, f"UNKNOWN({proto_num})")
    print(f"{proto_name}: {count} csomag")

print("\nüî¢ Leggyakoribb TCP/UDP c√©lportok √©s alkalmaz√°sr√©teg protokollok:")
for port, count in port_counter.most_common(10):
    proto_name = app_proto_names.get(port, "Ismeretlen")
    print(f"Port {port} ({proto_name}): {count} csomag")
